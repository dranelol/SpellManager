Spell Manager Documentation

Programmer Information:
		Name: Matthew Wallace
		Creation date: 7/11/14
		
Problem Description:
Using your desired design methodology, design and implement a C++ program that simulates a spell casting system 
which satisfies the following requirements:
	-Players can cast different spells and can only cast one spell at a time.  
	-Multiple spells from different players can be active at the same time.
	-The spell casting system only supports one kind of spell which causes immediate damage to targets 
	once the casting time has expired.
	-Pending spells for dead players are cancelled.
	
Architecture Description:

Two objects are implemented in this system: Players and Spells. 

A Player object contains all information needed about a player,
and has the ability to attempt to cast a spell. Each Player object is updated by the main system to check whether 
or not certain conditions have been met that would allow for a spell to be cast. If those conditions are met, a spell 
is chosen (by other conditions) and an attempt to cast the spell is made. If the player's cast cooldown is not longer 
than the time the program has been running, the spell is cast. 

A Spell object simply holds all information about a spell. 

Also included in the Spell object specification are specifications for two structs used during operation: 
SpellCast and MinHeapCompare. 

A SpellCast struct contains a value for a unique spellID, and the current cast/resolve time of that spell. 
This cast/resolve time is the time, in seconds since the program has been running, when the spell should be resolved, 
or cast. 

The MinHeapCompare struct allows a priority queue to be used as a minheap, instead of a maxheap, by providing a 
reverse comparator for SpellCast objects.

System/Operation Description:

The system first initializes all data structures used during operation: 
	- SpellMap, a mapping from spell ID to spell object
	- PlayerMap, a mapping from player ID to player object
	- SpellPlayerMap, a mapping from spell ID to player ID
	- SpellCastHeap, a minheap containing every instance of a spell cast, sorted by the time each spell should be 
	resolved
	
The system then initializes all spells and players, adding them to their respective containers. 

Then, the system enters the main game loop. 

Inside the loop, first all players are updated. Inside this update function, conditions are checked for
whether or not a spell should be cast. If these conditions are met, then more logic is executed
to choose which spell should be cast next. If the player's current cast cooldown is less than or equal to
the time since the program started, then the spell may be cast. A new SpellCast object is created, pushed
onto the minheap, and the player's cast cooldown is set to the current time since program start, plus the 
casting cooldown of the spell being cast.

Next, we attempt to resolve the next spell. First, the spellcast heap is checked to see if a spell exists.
If one does exist, we check to see whether or not its cast/resolve time is less than or equal to the current 
time since program start. If it is, we find the player that cast the spell, and check whether or not they are dead. 
If they are dead, the spellcast is removed from the heap, and operation continues. If they are alive, the spell is resolved: 
damage is done, effects happen, etc, the spell is removed from the heap, and operation continues.

Design Description:

First off, I decided to utilize a lot of containers that I am comfortable with in this design. 

In designing game systems, I try to only have a single collection for any number of my entity objects 
(in this case, spells and players) and simply reference mappings to each of those objects, and create mappings between them. 
This gives the system a central location to store one single version of each object, and makes it quite simple to reference 
those objects. I used three such mappings in this design: one each to hold players and spells, and a mapping from spells 
to players, to keep track of which player owned which spell.

As far as data structures go, minheaps are one of my favorite to use for any sorted data. 
C++ STL contains a data structure that closely resembles a maxheap, which is the priority_queue. It is trivial to turn
this data structure into a minheap; you only need to provide a comparator function that acts in reverse 
(compares greater-than rather than less-than). Since it is quite easy to simply change the priority_queue into a minheap, 
than use or implement some other data structure, I went with this method. I chose to use a minheap to store the 
spellcast information, as they are automatically sorted, so long as you define how they should be sorted.
I simply need to check the top value, and that will be the next spell that should be cast in order. 
